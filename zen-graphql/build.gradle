plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.0'
}

apply plugin: 'io.spring.dependency-management'

group 'io.github.rothschil'
version '1.0.0'
def SpringBootVersion="2.5.0"

repositories {
    mavenLocal()
    mavenCentral()
}


jar {
    // 禁用档案后缀，处理 **-plain.jar
    archiveClassifier = ''
}

// 默认不需要打可执行jar包
bootJar {
    enabled = true
}

tasks.withType(JavaCompile) {
    options.encoding('UTF-8')
}

dependencies {
    annotationProcessor('org.projectlombok:lombok:1.18.20')
    testImplementation('org.projectlombok:lombok:1.18.20')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.20')
    implementation('org.projectlombok:lombok:1.18.20')

    testImplementation("org.springframework.boot:spring-boot-starter-test:$SpringBootVersion") {
    }
    implementation("io.github.rothschil:persistence-jpa:1.2.3.RELEASE"){
        exclude group:'com.oracle', module: 'ojdbc6'
//        exclude group:'mysql', module: 'mysql-connector-java'
        exclude group:'com.alibaba', module: 'druid-spring-boot-starter'
//        exclude group:'org.springframework.boot', module: 'spring-boot-starter-jdbc'
//        exclude group:'net.bytebuddy', module: 'byte-buddy'
        exclude group:'org.glassfish.jaxb', module: 'jaxb-runtime'
    }
    implementation('com.graphql-java:graphql-spring-boot-starter:5.0.2'){
        exclude group:'com.google.guava', module: 'guava'
        exclude group:'commons-io', module: 'commons-io'
        exclude group:'org.springframework.boot', module: 'spring-boot-configuration-processor'
        exclude group:'org.springframework.boot', module: 'spring-boot-autoconfigure'
        exclude group:'org.springframework.boot', module: 'spring-boot-starter-websocket'
        exclude group:'javax.servlet', module: 'javax.servlet-api'
        exclude group:'com.graphql-java', module: 'graphql-java'
        exclude group:'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group:'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group:'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group:'com.fasterxml.jackson.datatype', module: 'jackson-datatype-jdk8'
    }
    implementation('com.graphql-java:graphiql-spring-boot-starter:5.0.2'){
        exclude group:'org.springframework.boot', module: 'spring-boot-autoconfigure'
        exclude group:'org.springframework.boot', module: 'spring-boot-configuration-processor'
        exclude group:'org.apache.commons', module: 'commons-text'
        exclude group:'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group:'org.springframework', module: 'spring-webmvc'
        exclude group:'org.springframework', module: 'spring-context'
        exclude group:'com.graphql-java', module: 'graphql-java'
    }
    implementation('com.graphql-java:graphql-java-spring-boot-starter-webmvc:2.0'){
        exclude group:'org.springframework.boot', module: 'spring-boot-autoconfigure'
        exclude group:'org.springframework', module: 'spring-webmvc'
        exclude group:'org.springframework', module: 'spring-context'
        exclude group:'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group:'com.graphql-java', module: 'graphql-java'
    }
    implementation('com.graphql-java:graphql-java:17.3')
    implementation('org.springframework.boot:spring-boot-starter-data-redis'){
//        exclude group:'io.netty', module: 'netty-transport'
//        exclude group:'io.netty', module: 'netty-common'
//        exclude group:'io.netty', module: 'netty-handler'
//        exclude group:'io.projectreactor', module: 'reactor-core'
    }
    implementation group: 'com.fasterxml', name: 'classmate', version: '1.5.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'


}

test {
    useJUnitPlatform()
}

// 删除所有输出目录
task cleanBuildDir(type: Delete) {
    delete "${projectDir}/build"
    delete "${projectDir}/out"
}

task javaDoc(type: Javadoc) {
    //  delete("javadoc/")
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
    //保留 public 的方法
    options.memberLevel = JavadocMemberLevel.PRIVATE
    options.linkSource = true
    options.links("http://docs.oracle.com/javase/8/docs/api/")
    //是否保留作者
    options.author = true
    options.version = true
    options.header = project.name
    //是否生成树状结构
    options.noTree = true
    options.noIndex = true
    options.noNavBar = true
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
    //定义所有Java源代码
    source = sourceSets.main.allJava
    // destinationDir = file("javadoc/") //生成 javadoc 的目标目录
    //报错不中断
    failOnError = false
}

task javaDocJar(type: Jar, dependsOn: javaDoc) {
    // 文件标记
    archiveClassifier = "javadoc"
    // 通过javaDocTask 找到目标路径
    from javaDoc.destinationDir
}

//自定义打包任务，继承Jar，并且依赖classes，最终编译才打包 dependsOn: [classes]
task sourceTask(type: Jar, dependsOn: [classes]) {
    //所有源码读取类型
    from sourceSets.main.allSource
    //定义文件后缀类型
    classifier('sources')
}
